https://www.jianshu.com/p/2828874af134  Java 大白话讲解设计模式之 -- UML类图

依赖、关联、聚合、组合这几种关系强度是越来越强的：组合>聚合>关联>依赖。
Generalization 泛化（继承）

Realization  实现

Dependency  依赖
	依赖关系是一种很弱的关系，一般是指一个类使用另一个类，
	这里学生捡到钱交给警察叔叔，学生和警察叔叔就是一种依赖关系。因为学生捡到钱给警察是一种偶然的事情，交给警察后他们之间就没有关系了。
	我们在学生类中加入一个交钱的方法，在警察类中加入一个收钱的方法，当调用学生的交钱方法时，就调用警察的收钱方法。Student的代码如下：
	public class Student{
	....
	....
	public Policemen policemen;
	
	.....
	public void sendCoin(){
	    policemen.receiveCoin();
	}
	}



Association 关联
	关联关系
	关联关系是一种比较强的关系，他们的关系是比较持久的，稳定的。
	比如学生从家里出来，学生和家就是一种关联关系。这种关系是比较稳定的。
	关联分单向关联和双向关联，如果一个类知道或者引用了另一个类，而另一个类不知道或者没有引用这个类，则这两个类是单向关联的。
	比如这里学生与家的关系就是单向关联的，因为每个学生都是有个家的（不考虑孤儿），但不能说每个家里都有学生。
	单向关联我们用带箭头的实线表示，箭头指向被引用或者被包含的类，这里也就是家这个类。
	
	双向关联是两个类彼此都知道对方的存在，比如老师与学生的关系就是双向的。小明的语文老师是张老师，张老师的学生有小明。双向关联用不带箭头的实线来连接两个类。



Aggregation 聚合
	聚合关系是一种特殊的关联关系，聚合关系强调的是整体和部分的关系，其中部分可以脱离整体而存在。
	比如雁群和一只大雁的关系，就是聚合关系，大雁离开雁群还是可以独立存在的。
	再比如警察与制服的关系，制服也是警察的一部分，制服可以脱离警察而存在。
	在UML类图中聚合用带空心菱形的直线表示，其中菱形指向整体



Composite 组合 
	组合关系也是一种特殊的关联关系，它与聚合关系很像，也是强调整体与部分的关系，不同的是部分无法脱离整体存在。
	比如学生用手捡钱，其中手就是学生的一部分，但是手不能脱离学生而单独存在。
	要是手能独立存在想想就可怕。。。这里我们称学生与手为组合关系，用带实心的菱形直线表示，其中菱形指向整体

