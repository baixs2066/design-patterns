一、类适配器模式
现实生活总的例子：出国旅游充电器口不适配，使用转接头（适配器）

适配器模式的工作原理
	1）适配器模式：将一个类的接口转换成另一种接口，让原来接口不兼容的类可以兼容
	2）从用户的角度看不到被适配者，是解耦的
	3）用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法
	4）用户收到反馈结果，感觉只是和目标接口交互

	类适配器模式介绍
	基本介绍：Adapter类，通过集成src类，实现dst类接口，完成 src -> dst 的适配。
	1）应用实例说明
	       以生活中充电器的例子来讲解适配器，充电器本身相当于Adapter，220V交流电相当于src（即被适配者），我们的目的dst（即 目标）是5V直流电
	       
	类适配器模式注意事项和细节
	1）Java是单集成机制，所以类适配器需要集成src类这一点算是一个缺点，因为这要求dst必须是接口，有一定局限性；
	2）src类的方法在Adapter中都会暴露出来，也增加了使用的成本。
	3）由于其继承了src类，所以它可以根据需求重写src类的方法，使用Adapter的灵活性增强了。
	
	
	
	对象适配器模式介绍
	1）基本思路和类的适配器模式相同，只是将Adapter类做修改，不是继承src类，而是持有src类的实例，以解决兼容性的问题。即：持有src类，实现dst类接口，完成 src -> dst 的适配
	2）根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系。
	3）对象适配器模式是适配器模式常用的一种
	
	对象适配器模式注意事项和细节
	1）对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。根据“合成复用原则”，使用组合替代继承，所以它解决了类适配器必须继承src的局限性问题，也不再要求dst必须是接口。
	2）使用成本更低，更灵活
	
	
	
	接口适配器模式介绍
	1）一些书籍成为：适配器模式（Default Adapter Pattern）或缺省适配器模式。
	2）当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求
	3）试用于一个接口不想使用其所有的方法的情况。
	

适配器模式的注意事项和细节
1）三种命名方式，是根据src是以怎样的形式给到Adapter （在Adapter里的形式）来命名的
2）类适配器： 以类给到，在Adapter里，就是将src当做类，继承
       对象适配器：以对象给到， 在Adapter里， 将src作为一个对象，持有
       接口适配器： 以接口给到，在Adapter里，将src作为一个接口，实现
3）Adapter模式最大的作用还是讲原来不兼容的接口融合在一起工作。
4）实际开发中，实现起来不拘泥于我们讲解的三种典型形式。	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	